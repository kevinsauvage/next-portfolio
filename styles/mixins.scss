/* stylelint-disable scss/operator-no-newline-after */
@mixin gradientText {
  background: $gradient_1;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

@mixin gradientBorder {
  &::before {
    position: absolute !important;
    z-index: -1 !important;
    padding: 2px !important;
    border-radius: $radius_2 !important;
    background: $gradient_1 !important;
    content: '';
    inset: 0 !important;
    -webkit-mask: linear-gradient(#ffffff 0 0) content-box, linear-gradient(#ffffff 0 0);
    mask: linear-gradient(#ffffff 0 0) content-box, linear-gradient(#ffffff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
  }
}

@function toRem($value) {
  $remValue: ($value / 16) + rem;
  @return $remValue;
}

@mixin font-size($min, $max, $min-vw: 320px, $max-vw: 1600px, $fallback: false, $line-height: 1.5) {
  $min-no-unit: strip-units($min);
  $max-no-unit: strip-units($max);

  $min-vw-no-unit: strip-units($min-vw);
  $max-vw-no-unit: strip-units($max-vw);

  @if getUnit($min) == 'rem' or getUnit($min) == 'em' {
    $min-no-unit: strip-units($min) * 16;
    $max-no-unit: strip-units($max) * 16;
  }

  $responsive: calc(
    #{$min-no-unit}px + (#{$max-no-unit} - #{$min-no-unit}) *
      ((100vw - #{$min-vw}) / (#{$max-vw-no-unit} - #{$min-vw-no-unit}))
  );

  @if $fallback {
    font-size: $fallback;
  } @else {
    font-size: $max;
  }
  font-size: $responsive;
  line-height: calc(#{$responsive} * #{$line-height});

  @media screen and (max-width: #{$min-vw}) {
    font-size: $min;
    line-height: calc(#{$min} * #{$line-height});
  }
  @media screen and (min-width: #{$max-vw}) {
    font-size: $max;
    line-height: calc(#{$max} * #{$line-height});
  }
}

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}
@function getUnit($value) {
  @return str-slice($value * 0 + '', 2, -1);
}
