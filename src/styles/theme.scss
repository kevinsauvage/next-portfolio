$primary-dark: #18a4e0;
$surface-dark: #1a1a1a;
$on-surface-dark: #e9e9e9;

$primary-light: #0057d0;
$surface-light: #fdfdfd;
$on-surface-light: #333333;

$globals: (
  black: #000000,
  rgb_black: #000000,
  white: #fcfcfc,
);

$colors-dark: (
  primary-100: $primary-dark,
  // Surface
  surface-100: $surface-dark,
  surface-200: scale-color($surface-dark, $lightness: -10%),
  surface-300: scale-color($surface-dark, $lightness: -20%),
  // On surface
  on-surface-100: $on-surface-dark,
  on-surface-200: scale-color($on-surface-dark, $lightness: -10%),
  on-surface-300: scale-color($on-surface-dark, $lightness: -20%),
  on-surface-400: scale-color($on-surface-dark, $lightness: -30%),
);

$colors-light: (
  primary-100: $primary-light,
  // Surface
  surface-100: $surface-light,
  surface-200: scale-color($surface-light, $lightness: -5%),
  surface-300: scale-color($surface-light, $lightness: -10%),
  // On surface
  on-surface-100: $on-surface-light,
  on-surface-200: scale-color($on-surface-light, $lightness: -10%),
  on-surface-300: scale-color($on-surface-light, $lightness: -20%),
  on-surface-400: scale-color($on-surface-light, $lightness: -30%),
);

@function hex-to-rgb($hex) {
  @return red($hex), green($hex), blue($hex);
}

@mixin generate-colors($colors) {
  @each $color, $value in $colors {
    @if str-slice(#{$value}, 1, 1) == '#' {
      --#{$color}: #{$value};
    } @else {
      --#{$color}: var(--#{$value});
    }
  }

  @each $color, $value in $colors {
    @if str-slice(#{$value}, 1, 1) == '#' {
      --rgb-#{$color}: #{hex-to-rgb($value)};
    } @else {
      --rgb-#{$color}: var(--rgb_#{$value});
    }
  }
}

html {
  @include generate-colors($globals);

  @include generate-colors($colors-dark);
}

.theme-light {
  @include generate-colors($colors-light);
}
