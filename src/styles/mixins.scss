/* stylelint-disable scss/operator-no-newline-after */

@function toRem($value) {
  $remValue: ($value / 16) + rem;

  @return $remValue;
}

@mixin font-size($min, $max, $min-vw: 320px, $max-vw: 1980px, $fallback: false, $line-height: 1.5) {
  $min-no-unit: strip-units($min);
  $max-no-unit: strip-units($max);
  $min-vw-no-unit: strip-units($min-vw);
  $max-vw-no-unit: strip-units($max-vw);

  @if getUnit($min) == 'rem' or getUnit($min) == 'em' {
    $min-no-unit: strip-units($min) * 16;
    $max-no-unit: strip-units($max) * 16;
  }

  $responsive: calc(
    #{$min-no-unit}px + (#{$max-no-unit} - #{$min-no-unit}) *
      ((100vw - #{$min-vw}) / (#{$max-vw-no-unit} - #{$min-vw-no-unit}))
  );

  @if $fallback {
    font-size: $fallback;
  } @else {
    font-size: $max;
  }

  font-size: $responsive;

  @media screen and (max-width: #{$min-vw}) {
    font-size: $min;
  }

  @media screen and (min-width: #{$max-vw}) {
    font-size: $max;
  }
}

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

@function getUnit($value) {
  @return str-slice($value * 0 + '', 2, -1);
}

@mixin placeholder($color) {
  &::-webkit-input-placeholder {
    /* WebKit, Blink, Edge */
    color: $color;
    text-transform: capitalize;
  }

  &:-moz-placeholder {
    /* Mozilla Firefox 4 to 18 */
    color: $color;
    text-transform: capitalize;
    opacity: 1;
  }

  &::-moz-placeholder {
    /* Mozilla Firefox 19+ */
    color: $color;
    text-transform: capitalize;
    opacity: 1;
  }

  &:-ms-input-placeholder {
    /* Internet Explorer 10-11 */
    color: $color;
    text-transform: capitalize;
  }

  &::-ms-input-placeholder {
    /* Microsoft Edge */
    color: $color;
    text-transform: capitalize;
  }

  &::placeholder {
    /* Most modern browsers support this now. */
    color: $color;
    text-transform: capitalize;
  }
}

@mixin glassEffect {
  border: $border-s;
  border-radius: $radius_1;
  -webkit-backdrop-filter: blur(15px) brightness(110%);
  backdrop-filter: blur(15px) brightness(110%);
}
